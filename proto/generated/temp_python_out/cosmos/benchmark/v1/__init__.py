# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/benchmark/v1/benchmark.proto, cosmos/benchmark/v1/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Op(betterproto.Message):
    """Op is a message describing a benchmark operation."""

    seed: int = betterproto.uint64_field(1)
    actor: str = betterproto.string_field(2)
    key_length: int = betterproto.uint64_field(3)
    value_length: int = betterproto.uint64_field(4)
    iterations: int = betterproto.uint32_field(5)
    delete: bool = betterproto.bool_field(6)
    exists: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class MsgLoadTest(betterproto.Message):
    """
    MsgLoadTestOps defines a message containing a sequence of load test operations.
    """

    caller: bytes = betterproto.bytes_field(1)
    ops: List["Op"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgLoadTestResponse(betterproto.Message):
    """
    MsgLoadTestResponse defines a message containing the results of a load test operation.
    """

    total_time: int = betterproto.uint64_field(1)
    total_errors: int = betterproto.uint64_field(2)


class MsgStub(betterproto.ServiceStub):
    async def load_test(
        self,
        msg_load_test: "MsgLoadTest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLoadTestResponse":
        return await self._unary_unary(
            "/cosmos.benchmark.v1.Msg/LoadTest",
            msg_load_test,
            MsgLoadTestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def load_test(self, msg_load_test: "MsgLoadTest") -> "MsgLoadTestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_load_test(
        self, stream: "grpclib.server.Stream[MsgLoadTest, MsgLoadTestResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.load_test(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cosmos.benchmark.v1.Msg/LoadTest": grpclib.const.Handler(
                self.__rpc_load_test,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLoadTest,
                MsgLoadTestResponse,
            ),
        }
