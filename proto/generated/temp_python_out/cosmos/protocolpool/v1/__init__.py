# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/protocolpool/v1/genesis.proto, cosmos/protocolpool/v1/query.proto, cosmos/protocolpool/v1/tx.proto, cosmos/protocolpool/v1/types.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...base import v1beta1 as __base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class ContinuousFund(betterproto.Message):
    """ContinuousFund defines the fields of continuous fund proposal."""

    recipient: str = betterproto.string_field(1)
    """Recipient is the address string of the account receiving funds."""

    percentage: str = betterproto.string_field(2)
    """
    Percentage is the percentage of funds to be allocated from Community pool.
    """

    expiry: datetime = betterproto.message_field(3)
    """Optional, if expiry is set, removes the state object when expired."""


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the protocolpool module."""

    enabled_distribution_denoms: List[str] = betterproto.string_field(1)
    """
    EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
     This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
    """

    distribution_frequency: int = betterproto.uint64_field(2)
    """
    DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
     x/protocolpool module.
    """


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the protocolpool module's genesis state."""

    continuous_funds: List["ContinuousFund"] = betterproto.message_field(1)
    """ContinuousFunds defines the continuous funds at genesis."""

    params: "Params" = betterproto.message_field(2)
    """
    Params defines the parameters of this module, currently only contains the
     denoms that will be used for continuous fund distributions.
    """


@dataclass(eq=False, repr=False)
class QueryCommunityPoolRequest(betterproto.Message):
    """
    QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
     method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryCommunityPoolResponse(betterproto.Message):
    """
    QueryCommunityPoolResponse is the response type for the Query/CommunityPool
     RPC method.
    """

    pool: List["__base_v1_beta1__.Coin"] = betterproto.message_field(1)
    """pool defines community pool's coins."""


@dataclass(eq=False, repr=False)
class QueryContinuousFundRequest(betterproto.Message):
    """
    QueryContinuousFundRequest is the request type for the Query/ContinuousFund
     RPC method.
    """

    recipient: str = betterproto.string_field(1)
    """
    recipient is the recipient address to query unclaimed budget amount for.
    """


@dataclass(eq=False, repr=False)
class QueryContinuousFundResponse(betterproto.Message):
    """
    QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFund
     RPC method.
    """

    continuous_fund: "ContinuousFund" = betterproto.message_field(1)
    """ContinuousFunds is the given continuous fund returned in the query."""


@dataclass(eq=False, repr=False)
class QueryContinuousFundsRequest(betterproto.Message):
    """
    QueryContinuousFundRequest is the request type for the Query/ContinuousFunds
     RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryContinuousFundsResponse(betterproto.Message):
    """
    QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFunds
     RPC method.
    """

    continuous_funds: List["ContinuousFund"] = betterproto.message_field(1)
    """ContinuousFunds defines all continuous funds in state."""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the response type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MsgFundCommunityPool(betterproto.Message):
    """
    MsgFundCommunityPool allows an account to directly
     fund the community pool.
    """

    depositor: str = betterproto.string_field(1)
    amount: List["__base_v1_beta1__.Coin"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgFundCommunityPoolResponse(betterproto.Message):
    """
    MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgCommunityPoolSpend(betterproto.Message):
    """
    MsgCommunityPoolSpend defines a message for sending tokens from the community
     pool to another account. This message is typically executed via a governance
     proposal with the governance module being the executing authority.
    """

    authority: str = betterproto.string_field(1)
    """
    Authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    recipient: str = betterproto.string_field(2)
    amount: List["__base_v1_beta1__.Coin"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgCommunityPoolSpendResponse(betterproto.Message):
    """
    MsgCommunityPoolSpendResponse defines the response to executing a
     MsgCommunityPoolSpend message.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgCreateContinuousFund(betterproto.Message):
    """
    MsgCreateContinuousFund defines a message for adding continuous funds.
    """

    authority: str = betterproto.string_field(1)
    """
    Authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    recipient: str = betterproto.string_field(2)
    """Recipient address of the account receiving funds."""

    percentage: str = betterproto.string_field(3)
    """
    Percentage is the percentage of funds to be allocated from Community pool.
    """

    expiry: datetime = betterproto.message_field(4)
    """Optional, if expiry is set, removes the state object when expired."""


@dataclass(eq=False, repr=False)
class MsgCreateContinuousFundResponse(betterproto.Message):
    """
    MsgCreateContinuousFundResponse defines the response to executing a
     MsgCreateContinuousFund message.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgCancelContinuousFund(betterproto.Message):
    """
    MsgCancelContinuousFund defines a message to cancel continuous funds for a specific recipient.
    """

    authority: str = betterproto.string_field(1)
    """Authority is the account address of authority."""

    recipient: str = betterproto.string_field(2)
    """
    Recipient is the account address string of the recipient whose funds are to be cancelled.
    """


@dataclass(eq=False, repr=False)
class MsgCancelContinuousFundResponse(betterproto.Message):
    """
    MsgCancelContinuousFundResponse defines the response to executing a
     MsgCancelContinuousFund message.
    """

    canceled_time: datetime = betterproto.message_field(1)
    """CanceledTime is the canceled time."""

    canceled_height: int = betterproto.uint64_field(2)
    """CanceledHeight defines the canceled block height."""

    recipient: str = betterproto.string_field(3)
    """
    Recipient is the account address string of the recipient whose funds are cancelled.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams is the Msg/UpdateParams request type."""

    authority: str = betterproto.string_field(1)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params" = betterproto.message_field(2)
    """
    params defines the x/protocolpool parameters to update.
    
     NOTE: All parameters must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
     MsgUpdateParams message.
    """

    pass


class QueryStub(betterproto.ServiceStub):
    async def community_pool(
        self,
        query_community_pool_request: "QueryCommunityPoolRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCommunityPoolResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Query/CommunityPool",
            query_community_pool_request,
            QueryCommunityPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def continuous_fund(
        self,
        query_continuous_fund_request: "QueryContinuousFundRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryContinuousFundResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Query/ContinuousFund",
            query_continuous_fund_request,
            QueryContinuousFundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def continuous_funds(
        self,
        query_continuous_funds_request: "QueryContinuousFundsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryContinuousFundsResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Query/ContinuousFunds",
            query_continuous_funds_request,
            QueryContinuousFundsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def fund_community_pool(
        self,
        msg_fund_community_pool: "MsgFundCommunityPool",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgFundCommunityPoolResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Msg/FundCommunityPool",
            msg_fund_community_pool,
            MsgFundCommunityPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def community_pool_spend(
        self,
        msg_community_pool_spend: "MsgCommunityPoolSpend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCommunityPoolSpendResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Msg/CommunityPoolSpend",
            msg_community_pool_spend,
            MsgCommunityPoolSpendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_continuous_fund(
        self,
        msg_create_continuous_fund: "MsgCreateContinuousFund",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateContinuousFundResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Msg/CreateContinuousFund",
            msg_create_continuous_fund,
            MsgCreateContinuousFundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_continuous_fund(
        self,
        msg_cancel_continuous_fund: "MsgCancelContinuousFund",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelContinuousFundResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Msg/CancelContinuousFund",
            msg_cancel_continuous_fund,
            MsgCancelContinuousFundResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/cosmos.protocolpool.v1.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):

    async def community_pool(
        self, query_community_pool_request: "QueryCommunityPoolRequest"
    ) -> "QueryCommunityPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def continuous_fund(
        self, query_continuous_fund_request: "QueryContinuousFundRequest"
    ) -> "QueryContinuousFundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def continuous_funds(
        self, query_continuous_funds_request: "QueryContinuousFundsRequest"
    ) -> "QueryContinuousFundsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_community_pool(
        self,
        stream: "grpclib.server.Stream[QueryCommunityPoolRequest, QueryCommunityPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.community_pool(request)
        await stream.send_message(response)

    async def __rpc_continuous_fund(
        self,
        stream: "grpclib.server.Stream[QueryContinuousFundRequest, QueryContinuousFundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.continuous_fund(request)
        await stream.send_message(response)

    async def __rpc_continuous_funds(
        self,
        stream: "grpclib.server.Stream[QueryContinuousFundsRequest, QueryContinuousFundsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.continuous_funds(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cosmos.protocolpool.v1.Query/CommunityPool": grpclib.const.Handler(
                self.__rpc_community_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCommunityPoolRequest,
                QueryCommunityPoolResponse,
            ),
            "/cosmos.protocolpool.v1.Query/ContinuousFund": grpclib.const.Handler(
                self.__rpc_continuous_fund,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryContinuousFundRequest,
                QueryContinuousFundResponse,
            ),
            "/cosmos.protocolpool.v1.Query/ContinuousFunds": grpclib.const.Handler(
                self.__rpc_continuous_funds,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryContinuousFundsRequest,
                QueryContinuousFundsResponse,
            ),
            "/cosmos.protocolpool.v1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
        }


class MsgBase(ServiceBase):

    async def fund_community_pool(
        self, msg_fund_community_pool: "MsgFundCommunityPool"
    ) -> "MsgFundCommunityPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def community_pool_spend(
        self, msg_community_pool_spend: "MsgCommunityPoolSpend"
    ) -> "MsgCommunityPoolSpendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_continuous_fund(
        self, msg_create_continuous_fund: "MsgCreateContinuousFund"
    ) -> "MsgCreateContinuousFundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_continuous_fund(
        self, msg_cancel_continuous_fund: "MsgCancelContinuousFund"
    ) -> "MsgCancelContinuousFundResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_fund_community_pool(
        self,
        stream: "grpclib.server.Stream[MsgFundCommunityPool, MsgFundCommunityPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_community_pool(request)
        await stream.send_message(response)

    async def __rpc_community_pool_spend(
        self,
        stream: "grpclib.server.Stream[MsgCommunityPoolSpend, MsgCommunityPoolSpendResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.community_pool_spend(request)
        await stream.send_message(response)

    async def __rpc_create_continuous_fund(
        self,
        stream: "grpclib.server.Stream[MsgCreateContinuousFund, MsgCreateContinuousFundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_continuous_fund(request)
        await stream.send_message(response)

    async def __rpc_cancel_continuous_fund(
        self,
        stream: "grpclib.server.Stream[MsgCancelContinuousFund, MsgCancelContinuousFundResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_continuous_fund(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cosmos.protocolpool.v1.Msg/FundCommunityPool": grpclib.const.Handler(
                self.__rpc_fund_community_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFundCommunityPool,
                MsgFundCommunityPoolResponse,
            ),
            "/cosmos.protocolpool.v1.Msg/CommunityPoolSpend": grpclib.const.Handler(
                self.__rpc_community_pool_spend,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCommunityPoolSpend,
                MsgCommunityPoolSpendResponse,
            ),
            "/cosmos.protocolpool.v1.Msg/CreateContinuousFund": grpclib.const.Handler(
                self.__rpc_create_continuous_fund,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateContinuousFund,
                MsgCreateContinuousFundResponse,
            ),
            "/cosmos.protocolpool.v1.Msg/CancelContinuousFund": grpclib.const.Handler(
                self.__rpc_cancel_continuous_fund,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelContinuousFund,
                MsgCancelContinuousFundResponse,
            ),
            "/cosmos.protocolpool.v1.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }
