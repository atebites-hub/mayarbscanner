# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: kuji/wasm/v1beta1/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgExecuteContract(betterproto.Message):
    """
    MsgExecuteContract represents a message to
     submits the given message data to a smart contract.
    """

    sender: str = betterproto.string_field(1)
    """Sender is the that actor that signed the messages"""

    contract: str = betterproto.string_field(2)
    """Contract is the address of the smart contract"""

    execute_msg: bytes = betterproto.bytes_field(3)
    """ExecuteMsg json encoded message to be passed to the contract"""

    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(5)
    """Coins that are transferred to the contract on execution"""


@dataclass(eq=False, repr=False)
class MsgExecuteContractResponse(betterproto.Message):
    """
    MsgExecuteContractResponse defines the Msg/ExecuteContract response type.
    """

    data: bytes = betterproto.bytes_field(1)
    """Data contains base64-encoded bytes to returned from the contract"""


class MsgStub(betterproto.ServiceStub):
    async def execute_contract(
        self,
        msg_execute_contract: "MsgExecuteContract",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgExecuteContractResponse":
        return await self._unary_unary(
            "/kuji.wasm.v1beta1.Msg/ExecuteContract",
            msg_execute_contract,
            MsgExecuteContractResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def execute_contract(
        self, msg_execute_contract: "MsgExecuteContract"
    ) -> "MsgExecuteContractResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_execute_contract(
        self,
        stream: "grpclib.server.Stream[MsgExecuteContract, MsgExecuteContractResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_contract(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/kuji.wasm.v1beta1.Msg/ExecuteContract": grpclib.const.Handler(
                self.__rpc_execute_contract,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgExecuteContract,
                MsgExecuteContractResponse,
            ),
        }
