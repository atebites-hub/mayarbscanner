# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmos/counter/v1/query.proto, cosmos/counter/v1/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class QueryGetCountRequest(betterproto.Message):
    """
    QueryGetCountRequest defines the request type for querying x/mock count.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryGetCountResponse(betterproto.Message):
    """
    QueryGetCountResponse defines the response type for querying x/mock count.
    """

    total_count: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class MsgIncreaseCounter(betterproto.Message):
    """MsgIncreaseCounter defines a count Msg service counter."""

    signer: str = betterproto.string_field(1)
    """
    signer is the address that controls the module (defaults to x/gov unless overwritten).
    """

    count: int = betterproto.int64_field(2)
    """count is the number of times to increment the counter."""


@dataclass(eq=False, repr=False)
class MsgIncreaseCountResponse(betterproto.Message):
    """MsgIncreaseCountResponse is the Msg/Counter response type."""

    new_count: int = betterproto.int64_field(1)
    """new_count is the number of times the counter was incremented."""


class QueryStub(betterproto.ServiceStub):
    async def get_count(
        self,
        query_get_count_request: "QueryGetCountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetCountResponse":
        return await self._unary_unary(
            "/cosmos.counter.v1.Query/GetCount",
            query_get_count_request,
            QueryGetCountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def increase_count(
        self,
        msg_increase_counter: "MsgIncreaseCounter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgIncreaseCountResponse":
        return await self._unary_unary(
            "/cosmos.counter.v1.Msg/IncreaseCount",
            msg_increase_counter,
            MsgIncreaseCountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):

    async def get_count(
        self, query_get_count_request: "QueryGetCountRequest"
    ) -> "QueryGetCountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_count(
        self,
        stream: "grpclib.server.Stream[QueryGetCountRequest, QueryGetCountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_count(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cosmos.counter.v1.Query/GetCount": grpclib.const.Handler(
                self.__rpc_get_count,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetCountRequest,
                QueryGetCountResponse,
            ),
        }


class MsgBase(ServiceBase):

    async def increase_count(
        self, msg_increase_counter: "MsgIncreaseCounter"
    ) -> "MsgIncreaseCountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_increase_count(
        self,
        stream: "grpclib.server.Stream[MsgIncreaseCounter, MsgIncreaseCountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.increase_count(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cosmos.counter.v1.Msg/IncreaseCount": grpclib.const.Handler(
                self.__rpc_increase_count,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgIncreaseCounter,
                MsgIncreaseCountResponse,
            ),
        }
