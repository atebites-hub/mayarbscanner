# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cometbft/types/v1/block.proto, cometbft/types/v1/canonical.proto, cometbft/types/v1/events.proto, cometbft/types/v1/evidence.proto, cometbft/types/v1/params.proto, cometbft/types/v1/types.proto, cometbft/types/v1/validator.proto
# plugin: python-betterproto
# This file has been @generated
import builtins
import warnings
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    List,
    Optional,
)

import betterproto

from ...crypto import v1 as __crypto_v1__
from ...version import v1 as __version_v1__


class BlockIdFlag(betterproto.Enum):
    """BlockIdFlag indicates which BlockID the signature is for"""

    UNKNOWN = 0
    """Indicates an error condition"""

    ABSENT = 1
    """The vote was not received"""

    COMMIT = 2
    """Voted for the block that received the majority"""

    NIL = 3
    """Voted for nil"""


class SignedMsgType(betterproto.Enum):
    """SignedMsgType is a type of signed message in the consensus."""

    UNKNOWN = 0
    """Unknown"""

    PREVOTE = 1
    """Prevote"""

    PRECOMMIT = 2
    """Precommit"""

    PROPOSAL = 32
    """Proposal"""


@dataclass(eq=False, repr=False)
class ConsensusParams(betterproto.Message):
    """
    ConsensusParams contains consensus critical parameters that determine the
     validity of blocks.
    """

    block: "BlockParams" = betterproto.message_field(1)
    evidence: "EvidenceParams" = betterproto.message_field(2)
    validator: "ValidatorParams" = betterproto.message_field(3)
    version: "VersionParams" = betterproto.message_field(4)
    abci: "AbciParams" = betterproto.message_field(5)
    synchrony: "SynchronyParams" = betterproto.message_field(6)
    feature: "FeatureParams" = betterproto.message_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("abci"):
            warnings.warn("ConsensusParams.abci is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class BlockParams(betterproto.Message):
    """BlockParams define limits on the block size and gas."""

    max_bytes: int = betterproto.int64_field(1)
    """
    Maximum size of a block, in bytes.
    
     Must be greater or equal to -1 and cannot be greater than the hard-coded
     maximum block size, which is 100MB.
    
     If set to -1, the limit is the hard-coded maximum block size.
    """

    max_gas: int = betterproto.int64_field(2)
    """
    Maximum gas wanted by transactions included in a block.
    
     Must be greater or equal to -1. If set to -1, no limit is enforced.
    """


@dataclass(eq=False, repr=False)
class EvidenceParams(betterproto.Message):
    """
    EvidenceParams determine the validity of evidences of Byzantine behavior.
    """

    max_age_num_blocks: int = betterproto.int64_field(1)
    """
    Maximum age of evidence, in blocks.
    
     The recommended formula for calculating it is max_age_duration / {average
     block time}.
    """

    max_age_duration: timedelta = betterproto.message_field(2)
    """
    Maximum age of evidence, in time.
    
     The recommended value of is should correspond to the application's
     "unbonding period" or other similar mechanism for handling
     Nothing-At-Stake attacks.
     See:
     https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed.
    """

    max_bytes: int = betterproto.int64_field(3)
    """
    Maximum size in bytes of evidence allowed to be included in a block.
    
     It should fall comfortably under the maximum size of a block.
    """


@dataclass(eq=False, repr=False)
class ValidatorParams(betterproto.Message):
    """
    ValidatorParams restrict the public key types validators can use.

     NOTE: uses ABCI public keys naming, not Amino names.
    """

    pub_key_types: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class VersionParams(betterproto.Message):
    """
    VersionParams contain the version of specific components of CometBFT.
    """

    app: int = betterproto.uint64_field(1)
    """
    The ABCI application version.
    
     It was named app_version in CometBFT 0.34.
    """


@dataclass(eq=False, repr=False)
class HashedParams(betterproto.Message):
    """
    HashedParams is a subset of ConsensusParams.

     It is hashed into the Header.ConsensusHash.
    """

    block_max_bytes: int = betterproto.int64_field(1)
    block_max_gas: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class SynchronyParams(betterproto.Message):
    """
    SynchronyParams determine the validity of block timestamps.

     These parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.
     For more information on the relationship of the synchrony parameters to
     block timestamps validity, refer to the PBTS specification:
     https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md
    """

    precision: timedelta = betterproto.message_field(1)
    """
    Bound for how skewed a proposer's clock may be from any validator on the
     network while still producing valid proposals.
    """

    message_delay: timedelta = betterproto.message_field(2)
    """
    Bound for how long a proposal message may take to reach all validators on
     a network and still be considered valid.
    """


@dataclass(eq=False, repr=False)
class FeatureParams(betterproto.Message):
    """
    FeatureParams configure the height from which features of CometBFT are enabled.
    """

    vote_extensions_enable_height: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_INT64
    )
    """
    Height during which vote extensions will be enabled.
    
     A value of 0 means vote extensions are disabled. A value > 0 denotes
     the height at which vote extensions will be (or have been) enabled.
    
     During the specified height, and for all subsequent heights, precommit
     messages that do not contain valid extension data will be considered
     invalid. Prior to this height, or when this height is set to 0, vote
     extensions will not be used or accepted by validators on the network.
    
     Once enabled, vote extensions will be created by the application in
     ExtendVote, validated by the application in VerifyVoteExtension, and
     used by the application in PrepareProposal, when proposing the next block.
    
     Cannot be set to heights lower or equal to the current blockchain height.
    """

    pbts_enable_height: Optional[int] = betterproto.message_field(
        2, wraps=betterproto.TYPE_INT64
    )
    """
    Height at which Proposer-Based Timestamps (PBTS) will be enabled.
    
     A value of 0 means PBTS is disabled. A value > 0 denotes the height at
     which PBTS will be (or has been) enabled.
    
     From the specified height, and for all subsequent heights, the PBTS
     algorithm will be used to produce and validate block timestamps. Prior to
     this height, or when this height is set to 0, the legacy BFT Time
     algorithm is used to produce and validate timestamps.
    
     Cannot be set to heights lower or equal to the current blockchain height.
    """


@dataclass(eq=False, repr=False)
class AbciParams(betterproto.Message):
    """ABCIParams is deprecated and its contents moved to FeatureParams"""

    vote_extensions_enable_height: int = betterproto.int64_field(1)
    """
    vote_extensions_enable_height has been deprecated.
     Instead, use FeatureParams.vote_extensions_enable_height.
    """

    def __post_init__(self) -> None:
        warnings.warn("AbciParams is deprecated", DeprecationWarning)
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidatorSet(betterproto.Message):
    """ValidatorSet defines a set of validators."""

    validators: List["Validator"] = betterproto.message_field(1)
    proposer: "Validator" = betterproto.message_field(2)
    total_voting_power: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class Validator(betterproto.Message):
    """Validator represents a node participating in the consensus protocol."""

    address: bytes = betterproto.bytes_field(1)
    pub_key: "__crypto_v1__.PublicKey" = betterproto.message_field(2)
    voting_power: int = betterproto.int64_field(3)
    proposer_priority: int = betterproto.int64_field(4)
    pub_key_bytes: bytes = betterproto.bytes_field(5)
    pub_key_type: str = betterproto.string_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("pub_key"):
            warnings.warn("Validator.pub_key is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class SimpleValidator(betterproto.Message):
    """
    SimpleValidator is a Validator, which is serialized and hashed in consensus.
     Address is removed because it's redundant with the pubkey.
     Proposer priority is removed because it changes every round.
    """

    pub_key: "__crypto_v1__.PublicKey" = betterproto.message_field(1)
    voting_power: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class PartSetHeader(betterproto.Message):
    """Header of the parts set for a block."""

    total: int = betterproto.uint32_field(1)
    hash: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class Part(betterproto.Message):
    """Part of the block."""

    index: int = betterproto.uint32_field(1)
    bytes: builtins.bytes = betterproto.bytes_field(2)
    proof: "__crypto_v1__.Proof" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BlockId(betterproto.Message):
    """
    BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.
    """

    hash: bytes = betterproto.bytes_field(1)
    part_set_header: "PartSetHeader" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Header(betterproto.Message):
    """Header defines the structure of a block header."""

    version: "__version_v1__.Consensus" = betterproto.message_field(1)
    """basic block info"""

    chain_id: str = betterproto.string_field(2)
    height: int = betterproto.int64_field(3)
    time: datetime = betterproto.message_field(4)
    last_block_id: "BlockId" = betterproto.message_field(5)
    """prev block info"""

    last_commit_hash: bytes = betterproto.bytes_field(6)
    """hashes of block data"""

    data_hash: bytes = betterproto.bytes_field(7)
    validators_hash: bytes = betterproto.bytes_field(8)
    """hashes from the app output from the prev block"""

    next_validators_hash: bytes = betterproto.bytes_field(9)
    consensus_hash: bytes = betterproto.bytes_field(10)
    app_hash: bytes = betterproto.bytes_field(11)
    last_results_hash: bytes = betterproto.bytes_field(12)
    evidence_hash: bytes = betterproto.bytes_field(13)
    """consensus info"""

    proposer_address: bytes = betterproto.bytes_field(14)


@dataclass(eq=False, repr=False)
class Data(betterproto.Message):
    """Data contains the set of transactions included in the block"""

    txs: List[bytes] = betterproto.bytes_field(1)
    """
    Txs that will be applied by state @ block.Height+1.
     NOTE: not all txs here are valid.  We're just agreeing on the order first.
     This means that block.AppHash does not include these txs.
    """


@dataclass(eq=False, repr=False)
class Vote(betterproto.Message):
    """
    Vote represents a prevote or precommit vote from validators for
     consensus.
    """

    type: "SignedMsgType" = betterproto.enum_field(1)
    height: int = betterproto.int64_field(2)
    round: int = betterproto.int32_field(3)
    block_id: "BlockId" = betterproto.message_field(4)
    timestamp: datetime = betterproto.message_field(5)
    validator_address: bytes = betterproto.bytes_field(6)
    validator_index: int = betterproto.int32_field(7)
    signature: bytes = betterproto.bytes_field(8)
    """
    Vote signature by the validator if they participated in consensus for the
     associated block.
    """

    extension: bytes = betterproto.bytes_field(9)
    """
    Vote extension provided by the application. Only valid for precommit
     messages.
    """

    extension_signature: bytes = betterproto.bytes_field(10)
    """
    Vote extension signature by the validator if they participated in
     consensus for the associated block.
     Only valid for precommit messages.
    """


@dataclass(eq=False, repr=False)
class Commit(betterproto.Message):
    """
    Commit contains the evidence that a block was committed by a set of validators.
    """

    height: int = betterproto.int64_field(1)
    round: int = betterproto.int32_field(2)
    block_id: "BlockId" = betterproto.message_field(3)
    signatures: List["CommitSig"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CommitSig(betterproto.Message):
    """CommitSig is a part of the Vote included in a Commit."""

    block_id_flag: "BlockIdFlag" = betterproto.enum_field(1)
    validator_address: bytes = betterproto.bytes_field(2)
    timestamp: datetime = betterproto.message_field(3)
    signature: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class ExtendedCommit(betterproto.Message):
    """ExtendedCommit is a Commit with ExtendedCommitSig."""

    height: int = betterproto.int64_field(1)
    round: int = betterproto.int32_field(2)
    block_id: "BlockId" = betterproto.message_field(3)
    extended_signatures: List["ExtendedCommitSig"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ExtendedCommitSig(betterproto.Message):
    """
    ExtendedCommitSig retains all the same fields as CommitSig but adds vote
     extension-related fields. We use two signatures to ensure backwards compatibility.
     That is the digest of the original signature is still the same in prior versions
    """

    block_id_flag: "BlockIdFlag" = betterproto.enum_field(1)
    validator_address: bytes = betterproto.bytes_field(2)
    timestamp: datetime = betterproto.message_field(3)
    signature: bytes = betterproto.bytes_field(4)
    extension: bytes = betterproto.bytes_field(5)
    """Vote extension data"""

    extension_signature: bytes = betterproto.bytes_field(6)
    """Vote extension signature"""


@dataclass(eq=False, repr=False)
class Proposal(betterproto.Message):
    """Block proposal."""

    type: "SignedMsgType" = betterproto.enum_field(1)
    height: int = betterproto.int64_field(2)
    round: int = betterproto.int32_field(3)
    pol_round: int = betterproto.int32_field(4)
    block_id: "BlockId" = betterproto.message_field(5)
    timestamp: datetime = betterproto.message_field(6)
    signature: bytes = betterproto.bytes_field(7)


@dataclass(eq=False, repr=False)
class SignedHeader(betterproto.Message):
    """
    SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it.
    """

    header: "Header" = betterproto.message_field(1)
    commit: "Commit" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LightBlock(betterproto.Message):
    """
    LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients.
    """

    signed_header: "SignedHeader" = betterproto.message_field(1)
    validator_set: "ValidatorSet" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BlockMeta(betterproto.Message):
    """BlockMeta contains meta information about a block."""

    block_id: "BlockId" = betterproto.message_field(1)
    block_size: int = betterproto.int64_field(2)
    header: "Header" = betterproto.message_field(3)
    num_txs: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class TxProof(betterproto.Message):
    """
    TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
    """

    root_hash: bytes = betterproto.bytes_field(1)
    data: bytes = betterproto.bytes_field(2)
    proof: "__crypto_v1__.Proof" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Evidence(betterproto.Message):
    """
    Evidence is a generic type for wrapping evidence of misbehavior by a validator.
    """

    duplicate_vote_evidence: "DuplicateVoteEvidence" = betterproto.message_field(
        1, group="sum"
    )
    light_client_attack_evidence: "LightClientAttackEvidence" = (
        betterproto.message_field(2, group="sum")
    )


@dataclass(eq=False, repr=False)
class DuplicateVoteEvidence(betterproto.Message):
    """
    DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
    """

    vote_a: "Vote" = betterproto.message_field(1)
    vote_b: "Vote" = betterproto.message_field(2)
    total_voting_power: int = betterproto.int64_field(3)
    validator_power: int = betterproto.int64_field(4)
    timestamp: datetime = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class LightClientAttackEvidence(betterproto.Message):
    """
    LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
    """

    conflicting_block: "LightBlock" = betterproto.message_field(1)
    common_height: int = betterproto.int64_field(2)
    byzantine_validators: List["Validator"] = betterproto.message_field(3)
    total_voting_power: int = betterproto.int64_field(4)
    timestamp: datetime = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class EvidenceList(betterproto.Message):
    """EvidenceList is a list of evidence."""

    evidence: List["Evidence"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Block(betterproto.Message):
    """Block defines the structure of a block in the CometBFT blockchain."""

    header: "Header" = betterproto.message_field(1)
    data: "Data" = betterproto.message_field(2)
    evidence: "EvidenceList" = betterproto.message_field(3)
    last_commit: "Commit" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CanonicalBlockId(betterproto.Message):
    """
    CanonicalBlockID is a canonical representation of a BlockID, which gets
     serialized and signed.
    """

    hash: bytes = betterproto.bytes_field(1)
    part_set_header: "CanonicalPartSetHeader" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CanonicalPartSetHeader(betterproto.Message):
    """
    CanonicalPartSetHeader is a canonical representation of a PartSetHeader,
     which gets serialized and signed.
    """

    total: int = betterproto.uint32_field(1)
    hash: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CanonicalProposal(betterproto.Message):
    """
    CanonicalProposal is a canonical representation of a Proposal, which gets
     serialized and signed.
    """

    type: "SignedMsgType" = betterproto.enum_field(1)
    height: int = betterproto.sfixed64_field(2)
    round: int = betterproto.sfixed64_field(3)
    pol_round: int = betterproto.int64_field(4)
    block_id: "CanonicalBlockId" = betterproto.message_field(5)
    timestamp: datetime = betterproto.message_field(6)
    chain_id: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class CanonicalVote(betterproto.Message):
    """
    CanonicalVote is a canonical representation of a Vote, which gets
     serialized and signed.
    """

    type: "SignedMsgType" = betterproto.enum_field(1)
    height: int = betterproto.sfixed64_field(2)
    round: int = betterproto.sfixed64_field(3)
    block_id: "CanonicalBlockId" = betterproto.message_field(4)
    timestamp: datetime = betterproto.message_field(5)
    chain_id: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CanonicalVoteExtension(betterproto.Message):
    """
    CanonicalVoteExtension provides us a way to serialize a vote extension from
     a particular validator such that we can sign over those serialized bytes.
    """

    extension: bytes = betterproto.bytes_field(1)
    height: int = betterproto.sfixed64_field(2)
    round: int = betterproto.sfixed64_field(3)
    chain_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class EventDataRoundState(betterproto.Message):
    """EventDataRoundState is emitted with each new round step."""

    height: int = betterproto.int64_field(1)
    round: int = betterproto.int32_field(2)
    step: str = betterproto.string_field(3)
