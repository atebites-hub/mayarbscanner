# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: kuji/wasm/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib

from .cosmos.base import v1beta1


@dataclass
class MsgExecuteContract(betterproto.Message):
    """
    MsgExecuteContract represents a message to submits the given message data
    to a smart contract.
    """

    # Sender is the that actor that signed the messages
    sender: str = betterproto.string_field(1)
    # Contract is the address of the smart contract
    contract: str = betterproto.string_field(2)
    # ExecuteMsg json encoded message to be passed to the contract
    execute_msg: bytes = betterproto.bytes_field(3)
    # Coins that are transferred to the contract on execution
    coins: List[v1beta1.Coin] = betterproto.message_field(5)


@dataclass
class MsgExecuteContractResponse(betterproto.Message):
    """
    MsgExecuteContractResponse defines the Msg/ExecuteContract response type.
    """

    # Data contains base64-encoded bytes to returned from the contract
    data: bytes = betterproto.bytes_field(1)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the oracle Msg service."""

    async def execute_contract(
        self,
        *,
        sender: str = "",
        contract: str = "",
        execute_msg: bytes = b"",
        coins: List[v1beta1.Coin] = [],
    ) -> MsgExecuteContractResponse:
        """Execute submits the given message data to a smart contract"""

        request = MsgExecuteContract()
        request.sender = sender
        request.contract = contract
        request.execute_msg = execute_msg
        if coins is not None:
            request.coins = coins

        return await self._unary_unary(
            "/kuji.wasm.v1beta1.Msg/ExecuteContract",
            request,
            MsgExecuteContractResponse,
        )
